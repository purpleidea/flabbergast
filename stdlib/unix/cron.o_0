Introduction{{{Generate configuration stamps for those ever confusing \Mono{cron} schedules.}}}

{{{A crontab-compatible scheduling string.}}}
schedule : Template {
	{{{The minute to run the cron job.}}}
	minute : anywhen
	{{{The minute to run the cron job.}}}
	hour : anywhen
	{{{The day_of_month to run the cron job.}}}
	day_of_month : anywhen
	{{{The month to run the cron job.}}}
	month : anywhen
	{{{The day of the week to run the cron job.}}}
	day_of_week : anywhen

	{{{The computed cron scheduling specifier.}}}
	cron_value :
		For part : [
			{ name : $minutes  value : minute  min : 0  max : 59 },
			{ name : $hours  value : hour  min : 0  max : 23 },
			{ name : $month_day  value : day_of_month min : 1  max : 31 },
			{ name : $month  value : month  min : 1  max : 12 },
			{ name : $week_day  value : day_of_week  min : 0  max : 6 }
		]
		Concat
			Let
				spec : If part.value Is Int Then part.value To Str Else part.value.cron_spec Enforce Str,
				min : (If part.value Is Int Then part.value Else part.value.cron_min ?? part.min) Enforce Int,
				max : (If part.value Is Int Then part.value Else part.value.cron_max ?? part.max) Enforce Int
			In
				If min >= part.min && max <= part.max
				Then spec
				Else Error "The cron specification for \(part.name) has range \(min) to \(max), which exceeds the allowed range \(part.min) to \(part.max)."
		With "\t"
}

{{{A scheduling specifier for any time.}}}
anywhen : {
	cron_spec : "*"
	cron_max : Null
	cron_min : Null
	cron_nest : 0
}
{{{A collection of times.}}}
list : Template {
	{{{A list of times, either as integers or other specifier templates.}}}
	of : Required

	cron_nest : 0
	cron_spec :
		For item : of
			Where !(item Is Null)
			Concat
				If item Is Int
					Then item
					Else If item.cron_nest <= cron_nest Then Error "Cannot nest these cron items."
					Else item.cron_spec
			With ","
	cron_max :
		For item : of
			Where !(item Is Null) && (item Is Int || !(item.cron_min Is Null))
			Reduce
				Let v : (If item Is Int Then item Else item.cron_max) Enforce Int
				In If max Is Null || v > max Then v Else max
			With max : Null
	cron_min :
		For item : of
			Where !(item Is Null) && (item Is Int || !(item.cron_min Is Null))
			Reduce
				Let v : (If item Is Int Then item Else item.cron_min) Enforce Int
				In If min Is Null || v < min Then v Else min
			With min : Null
}
{{{A scheduling specifier for a range of times.}}}
range : Template {
	{{{The start time.}}}
	from : Required
	{{{The end time.}}}
	to : Required
	{{{The increment over the range.}}}
	by : Null

	cron_nest : 1
	cron_spec :
		(If from Enforce Int < to Enforce Int
			Then "\(from)-\(to)"
			Else Error "Cron range \(from) through \(to) is not valid.") &
		(If by Is Null || by Enforce Int == 1
			Then ""
			Else
				If by Enforce Int < 2 || by >= cron_max
					Then Error "Increment “\(by)” is not appropriate."
					Else "/\(by)")
	cron_max : to
	cron_min : from
}

{{{A specification for doing something the first Monday of the year.}}}
yearly : schedule {
	minute : 0
	hour : 0
	day_of_month : 1
	month : 1
}
{{{A specification for doing something the first day of the month.}}}
monthly : schedule {
	minute : 0
	hour : 0
	day_of_month : 1
}
{{{A specification for doing something every Sunday.}}}
weekly : schedule {
	minute : 0
	hour : 0
	day_of_week : 0
}
{{{A specification for doing something every midnight.}}}
daily : schedule {
	minute : 0
	hour : 0
}
{{{A specification for doing something at the start of every hour.}}}
hourly : schedule {
	minute : 0
}
