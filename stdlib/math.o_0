Introduction{{{General arithmetic and trignonmetry functions.}}}
utils_lib : From lib:utils

{{{Compute the absolute value of a number.}}}
absolute : utils_lib.firstifier(base : absolute_list)

{{{Compute the absolute value of a list of numbers.}}}
absolute_list : Template From native:math.abs {
	{{{A list of numbers.}}}
	args : Used
}

{{{The default angle unit for trigonometric calculations.}}}
angle_unit : angle_unit_radians

{{{The multiplier for trignonmetry in degrees.}}}
angle_unit_degrees : 0.0174532925
{{{The multiplier for trignonmetry in gradians.}}}
angle_unit_gradians : 0.01570796326794896696777
{{{The multiplier for trignonmetry in radians.}}}
angle_unit_radians : 1.0
{{{The multiplier for trignonmetry in turns.}}}
angle_unit_turns : 6.283185307179586231996

{{{Compute the smallest integral value greater than or equal to the argument.}}}
ceiling : utils_lib.firstifier(base : ceiling_list) Enforce Template

{{{Compute the smallest integral value greater than or equal to each number in a list.}}}
ceiling_list : Template From native:math.ceiling {
	{{{A list of numbers.}}}
	args : Used
}

{{{Trigonometic functions for a circle.}}}
circle : {
	arccos : utils_lib.firstifier(base : arccos_list)
	arccos_list : Template From native:math.circle.arccos {
		{{{A list of angles.}}}
		args : Used
	}
	arcsin : utils_lib.firstifier(base : arcsin_list)
	arcsin_list : Template From native:math.circle.arcsin {
		{{{A list of angles.}}}
		args : Used
	}
	arctan : utils_lib.firstifier(base : arctan_list)
	arctan_list : Template From native:math.circle.arctan {
		{{{A list of angles.}}}
		args : Used
	}
	cos : utils_lib.firstifier(base : cos_list)
	cos_list : Template From native:math.circle.cos {
		{{{A list of angles.}}}
		args : Used
	}
	sin : utils_lib.firstifier(base : sin_list)
	sin_list : Template From native:math.circle.sin {
		{{{A list of angles.}}}
		args : Used
	}
	tan : utils_lib.firstifier(base : tan_list)
	tan_list : Template From native:math.circle.tan {
		{{{A list of angles.}}}
		args : Used
	}
}

{{{Compute a running product.}}}
cumulative_product : cumulative_productifier(base : utils_lib.identity) Enforce Template

{{{Convert a function-like template from one that returns a list of numbers
into a list of cumulative products.}}}
cumulative_productifier : Template {
	base : Required
	{{{The starting value.}}}
	product_initial : 1
	value : Template base {
		value +original: For item : original, item_name : Name
			Accumulate item * run With run : product_initial
			Select item_name : run
	}
}

{{{Compute a running sum.}}}
cumulative_sum : cumulative_sumifier(base : utils_lib.identity) Enforce Template

{{{Convert a function-like template from one that returns a list of numbers
into a list of cumulative sums.}}}
cumulative_sumifier : Template {
	base : Required
	{{{The starting value.}}}
	sum_initial : 0
	value : Template base {
		value +original: For item : original, item_name : Name
			Accumulate item + run With run : sum_initial
			Select item_name : run
	}
}

{{{Compute the largest integral value less than or equal to the argument.}}}
floor : utils_lib.firstifier(base : floor_list) Enforce Template

{{{Compute the largest integral value less than or equal to the each number in a list.}}}
floor_list : Template From native:math.floor {
	{{{A list of numbers.}}}
	args : Used
}

{{{Trigonometic functions for a hyperbola.}}}
hyperbola : {
	arccos : utils_lib.firstifier(base : arccos_list)
	arccos_list : Template From native:math.hyperbola.arccos {
		{{{A list of angles.}}}
		args : Used
	}
	arcsin : utils_lib.firstifier(base : arcsin_list)
	arcsin_list : Template From native:math.hyperbola.arcsin {
		{{{A list of angles.}}}
		args : Used
	}
	arctan : utils_lib.firstifier(base : arctan_list)
	arctan_list : Template From native:math.hyperbola.arctan {
		{{{A list of angles.}}}
		args : Used
	}
	cos : utils_lib.firstifier(base : cos_list)
	cos_list : Template From native:math.hyperbola.cos {
		{{{A list of angles.}}}
		args : Used
	}
	sin : utils_lib.firstifier(base : sin_list)
	sin_list : Template From native:math.hyperbola.sin {
		{{{A list of angles.}}}
		args : Used
	}
	tan : utils_lib.firstifier(base : tan_list)
	tan_list : Template From native:math.hyperbola.tan {
		{{{A list of angles.}}}
		args : Used
	}
}
{{{Compute the logarithm of the argument. See \{log_list} for details.}}}
log : utils_lib.firstifier(base : log_list) Enforce Template

{{{Compute the logarithm of the argument.}}}
log_list : Template From native:math.log {
	{{{A list of numbers.}}}
	args : Used
	{{{The base to use.}}}
	base : natural
	real_base : base To Float
}

{{{The natural number, \Emph{e}.}}}
natural : 2.7182818284590452354

{{{The ratio of a circle's circumference to its diameter, \Emph{π}.}}}
pi : 3.14159265358979323846

{{{Compute the argument raised to an exponent. See \{power_list} for details.}}}
power : utils_lib.firstifier(base : power_list)

{{{Compute the argument raised to an exponent.}}}
power_list : Template From native:math.power {
	{{{A list of numbers.}}}
	args : Used
	{{{A number to raise the values.}}}
	exponent : Required
	real_exponent : exponent To Float
}

{{{Rounds the arguments to a specified number of decimal places. See
\{round_list} for details.}}}
round : utils_lib.firstifier(base : round_list) Enforce Template

{{{Rounds the arguments to a specified number of decimal places.}}}
round_list : Template From native:math.round {
	{{{A list of numbers.}}}
	args : Used
	{{{The number of decimal places. Must be non-negative.}}}
	places : 0
	real_places : If places Enforce Int < 0
		Then Error "The number of decimal places specified, \(places), must be non-negative."
		Else places
}

{{{Sum a list of numbers.}}}
sum : utils_lib.sum Enforce Template

{{{Convert a function-like template from one that returns a list of numbers to
a single sum.}}}
sumifier : utils_lib.sumifier Enforce Template

{{{The ratio of a circle's circumference to its radius, \Emph{τ}.}}}
tau : pi * 2
