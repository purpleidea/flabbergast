sql_lib : From lib:sql
utils_lib : From lib:utils

test_query : Template sql_lib.offline_query {
	user_defined_tables +: {
		xxx : Template offline_table_tmpl {
			table_schema : "BLAH"
			table_name : "XXX"
			columns +: {
				aaa : column_tmpl { column_name : "AAA" }
				bbb : column_tmpl { column_name : "BBB" }
			}
		}
		yyy : Template offline_table_tmpl {
			table_name : "YYY"
			table_schema : "BLAH"
			columns +: {
				ccc : column_tmpl { column_name : "CCC"  sql_type : sql_types.int }
				ddd : column_tmpl { column_name : "DDD"  sql_type : sql_types.float }
			}
		}
	}
	columns : {
		a : expr.and {
			args : [
				expr.not {
					arg : expr.is_null {
						arg : column.xxx.aaa
					}
				},
				expr.le {
					left : expr.cast {
						sql_type : sql_types.int
						arg : column.xxx.bbb
					}
					right : 5
				}
			]
		}
		b : expr.avg {
			arg : column.yyy.ddd
		}
		c : expr.negate {
			arg : column.yyy.ccc
		}
		d : column.xxx.aaa
	}

	where +: {
		x : expr.case_bool {
			cases : [
				when {
					test : True
					result : 5
				}
			]
			else : 5
		}
		y : expr.like {
			left : expr.case_input {
				input : 3
				cases : [
					when {
						test : 2
						result : "foo"
					}
				]
			}
			right : "foo%"
		}
	}
	group_by +: {
		apb : expr.str_join {
			args : [ column.xxx.aaa, column.xxx.bbb ]
		}
		c : column.yyy.ccc
	}
}

sql_stmts : {
	mssql : "SELECT ((NOT ([BLAH].[XXX].[AAA] IS NULL))AND((CAST([BLAH].[XXX].[BBB] AS INTEGER)) <= 5)) AS [a], AVG([BLAH].[YYY].[DDD]) AS [b], (- [BLAH].[YYY].[CCC]) AS [c], [BLAH].[XXX].[AAA] AS [d] FROM [BLAH].[XXX], [BLAH].[YYY] WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN ('foo') END) LIKE ('foo%')) GROUP BY CONCAT([BLAH].[XXX].[AAA], [BLAH].[XXX].[BBB]), [BLAH].[YYY].[CCC]"
	mysql : "SELECT ((NOT (`BLAH`.`XXX`.`AAA` IS NULL))AND((CAST(`BLAH`.`XXX`.`BBB` AS SIGNED)) <= 5)) AS `a`, AVG(`BLAH`.`YYY`.`DDD`) AS `b`, (- `BLAH`.`YYY`.`CCC`) AS `c`, `BLAH`.`XXX`.`AAA` AS `d` FROM `BLAH`.`XXX`, `BLAH`.`YYY` WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN 'foo' END) LIKE 'foo%') GROUP BY CONCAT(`BLAH`.`XXX`.`AAA`, `BLAH`.`XXX`.`BBB`), `BLAH`.`YYY`.`CCC`"
	oracle : "SELECT ((NOT (\"BLAH\".\"XXX\".\"AAA\" IS NULL))AND((CAST(\"BLAH\".\"XXX\".\"BBB\" AS INTEGER)) <= 5)) AS \"a\", AVG(\"BLAH\".\"YYY\".\"DDD\") AS \"b\", (- \"BLAH\".\"YYY\".\"CCC\") AS \"c\", \"BLAH\".\"XXX\".\"AAA\" AS \"d\" FROM \"BLAH\".\"XXX\", \"BLAH\".\"YYY\" WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN 'foo' END) LIKE 'foo%') GROUP BY (\"BLAH\".\"XXX\".\"AAA\"||\"BLAH\".\"XXX\".\"BBB\"), \"BLAH\".\"YYY\".\"CCC\""
	postgresql : "SELECT ((NOT (\"BLAH\".\"XXX\".\"AAA\" IS NULL))AND((CAST(\"BLAH\".\"XXX\".\"BBB\" AS INTEGER)) <= 5)) AS \"a\", AVG(\"BLAH\".\"YYY\".\"DDD\") AS \"b\", (- \"BLAH\".\"YYY\".\"CCC\") AS \"c\", \"BLAH\".\"XXX\".\"AAA\" AS \"d\" FROM \"BLAH\".\"XXX\", \"BLAH\".\"YYY\" WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN E'foo' END) LIKE E'foo%') GROUP BY (\"BLAH\".\"XXX\".\"AAA\"||\"BLAH\".\"XXX\".\"BBB\"), \"BLAH\".\"YYY\".\"CCC\""
	sqlite : "SELECT ((NOT (\"BLAH\".\"XXX\".\"AAA\" IS NULL))AND((CAST(\"BLAH\".\"XXX\".\"BBB\" AS INTEGER)) <= 5)) AS \"a\", AVG(\"BLAH\".\"YYY\".\"DDD\") AS \"b\", (- \"BLAH\".\"YYY\".\"CCC\") AS \"c\", \"BLAH\".\"XXX\".\"AAA\" AS \"d\" FROM \"BLAH\".\"XXX\", \"BLAH\".\"YYY\" WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN 'foo' END) LIKE 'foo%') GROUP BY (\"BLAH\".\"XXX\".\"AAA\"||\"BLAH\".\"XXX\".\"BBB\"), \"BLAH\".\"YYY\".\"CCC\""
}

results : For provider : sql_lib.sql_providers, stmt : sql_stmts, name : Name
	Select name : stmt Is Null || test_query(provider : provider {}) == stmt

value : utils_lib.all(args : results)
